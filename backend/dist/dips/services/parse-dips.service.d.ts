import { ConfigService } from "@nestjs/config";
import { IGitFile, ISynchronizeData, IPreamble } from "../interfaces/dips.interface";
import { DIPsService } from "./dips.service";
import { SimpleGitService } from "./simple-git.service";
import { MarkedService } from "./marked.service";
import { Component, DIP } from "../entities/dips.entity";
import { GithubService } from "./github.service";
import { PullRequestService } from "./pull-requests.service";
export declare class ParseDIPsService {
    private simpleGitService;
    private dipsService;
    private configService;
    private githubService;
    private markedService;
    private pullRequestService;
    baseDir: string;
    private readonly logger;
    constructor(simpleGitService: SimpleGitService, dipsService: DIPsService, configService: ConfigService, githubService: GithubService, markedService: MarkedService, pullRequestService: PullRequestService);
    loggerMessage(message: string): void;
    parse(): Promise<boolean>;
    parseDIP(item: any, isNewDIP: boolean): Promise<DIP>;
    deleteDipsFromMap(filesDB: Map<string, IGitFile>): Promise<void>;
    updateIfDifferentHash(fileDB: any, item: any): Promise<boolean>;
    synchronizeData(filesGit: IGitFile[], filesDB: Map<string, IGitFile>): Promise<ISynchronizeData>;
    sendIssue(errors: any[]): Promise<void>;
    getComponentsSection(data: string): string;
    getDataFromComponentText(componentText: string): Component[];
    parseDipsNamesComponentsSubproposals(data: any, isOnComponentSummary: any): any;
    private parseReferenceList;
    private parseReferencesTokens;
    private parseReferences;
    private parseParagraphSummary;
    private parseNotTitleHeading;
    private extractDipNumberFromDipName;
    parseLexerData(fileString: string, item: IGitFile): DIP;
    setSubproposalValue(dipName: string): number;
    parsePreamble(preambleData: string, subproposal?: boolean): IPreamble;
    parseSections(file: string): Promise<any>;
    updateSubproposalCountField(): Promise<void>;
}
